@model Users


@if (Model.FirstName != null)
{
    <div class="alert alert-success alert-dismissible">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
        <p>Check in your inbox folder or spam folder     </p>
    </div>
}

@if (Model.Id == User.Identity.GetUserId())
{
    <div>
        <div class="pull-right">
            @{

                Html.DevExpress().Button(m =>
                {
                    m.Text = "Resend Email";
                    m.ClientSideEvents.Click = "function(s,e){SendEmailVerification(s,e)}";
                    m.Name = "btnResendEmail";
                    m.UseSubmitBehavior = false;
                    m.ClientEnabled = Model.FirstName == null ? false : true;
                    m.EnableClientSideAPI = true;
                }).GetHtml();
            }
        </div>

        <div class="clearfix"></div>
    </div>
}
@{


    Html.DevExpress().LoadingPanel(settings =>
    {
        settings.Name = "LoadingSubmit";
        settings.Modal = true;


    }).GetHtml();

}

<div class="panel panel-body margin-top-10">

    @{
        Html.DevExpress().PageControl(settings =>
        {

            settings.Name = "ApplicantDetails";
            settings.Width = Unit.Percentage(100);
            settings.TabPages.Add("Applicant Basic Information").SetContent(() =>
            {
                Html.RenderPartial("_ApplicantBasicInformationPartial", Model);
                Html.RenderAction("ButtonTabProfilePartial", new { buttonName = "btnApplicantBasicInformationTabNext" });

            });
            settings.TabPages.Add("Educational Attainment").SetContent(() =>
            {

                Html.RenderAction("EducationalAttainmentGridViewPartial", new { UserId = Model.Id });
                Html.RenderAction("ButtonTabProfilePartial", new { buttonName = "btnEducationAttainmentTabNext" });

            });
            settings.TabPages.Add("Employment History").SetContent(() =>
            {

                Html.RenderAction("EmploymentHistoryGridViewPartial", new { UserId = Model.Id });
                Html.RenderPartial("_btnUpdateProfilePartial", Model);
            });
        }).GetHtml();
    }



</div>







<script>
    var Email = "";
    function PrepareValidationScripts() {
        var form = $('#form-profile');
        if (form.executed)
            return;

        form.removeData("validator");
        $.validator.unobtrusive.parse('#form-profile');
        form.executed = true;
    }


    function InitializeValidationRulesForForm() {
        var form = $('#form-profile');
        if (form.attr("executed"))
            return;
        form.removeData("validator");
        $.validator.unobtrusive.parse('#form-profile');
        form.executed = true;
    }
    function IsValidForm() {
        InitializeValidationRulesForForm();
        var validator = $.data($('#form-profile')[0], 'validator');
        return validator.form();
    }
    function ResendEmail() {



    }

    function OnValueChanged(s, e) {
        Email = '@Model.Email';
       @{
           if(Model.Email!=null )
           {
               ViewContext.Writer.Write("CheckEmailChange(s,e);");
           }
        }

    }
    function CheckEmailChange(s,e) {
        isChanged = true;
        if (s.GetValue() != Email) {
            btnResendEmail.SetEnabled(false);
        }
        else {
            btnResendEmail.SetEnabled(true);
        }
    }
    function SendEmailVerification(s, e) {
        $.ajax({
            url: '@Url.Action("ResendEmailVerification","member")',
            beforeSend: function (s, e) {
                LoadingSubmit.Show();
            },

        }).done(function () {
            LoadingSubmit.Hide();
            });
    }


    function btnNext(s, e) {
        var tabIndex = ApplicantDetails.GetActiveTabIndex() + 1;
        ApplicantDetails.SetActiveTabIndex(tabIndex);
    }
</script>