@model Users

@if (Model.Id == User.Identity.GetUserId())
{
    <div>
        <div class="pull-left">
            @{ Html.DevExpress().Button(m =>
                {
                    m.Text = "Update";
                    m.Name = "btnSubmit";
                    m.UseSubmitBehavior = true;
                }).GetHtml();
                Html.DevExpress().Button(m =>
                {
                    m.Text = "Resend Email";
                    m.ClientSideEvents.Click = "function(s,e){SendEmailVerification(s,e)}";
                    m.Name = "btnResendEmail";
                    m.UseSubmitBehavior = false;
                    m.ClientEnabled = Model.FirstName == null ? false : true;
                    m.EnableClientSideAPI = true;
                }).GetHtml();
            }
        </div>
      
        <div class="clearfix"></div>
    </div>
}

@{


    Html.DevExpress().LoadingPanel(settings =>
    {
        settings.Name = "LoadingSubmit";
        settings.Modal = true;


    }).GetHtml();



    Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "UserFormLayout";
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.Enabled = Model.Id == User.Identity.GetUserId() ? true : false;
        var groupItem = settings.Items.AddGroupItem(groupSettings =>
        {
            groupSettings.Caption = "User Information";
            groupSettings.ShowCaption = DefaultBoolean.True;
            groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;
        });

        groupItem.SettingsItems.ShowCaption = DefaultBoolean.True;
        groupItem.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Left;
        settings.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;
        groupItem.SettingsItemHelpTexts.Position = HelpTextPosition.Auto;
        groupItem.ColCount = 2;

        groupItem.Items.Add(m => m.FirstName, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.LastName, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;

            });
        });
        groupItem.Items.Add(m => m.MiddleName, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.CivilStatus, item =>
        {
            item.NestedExtension().ComboBox(cbo =>
            {
                cbo.Properties.ValidationSettings.RequiredField.IsRequired = true;
                cbo.Properties.ValidationSettings.SetFocusOnError = true;
                cbo.Properties.ValidationSettings.Display = Display.Dynamic;
                cbo.Properties.DataSource = Enum.GetValues(typeof(CivilStatus)).Cast<CivilStatus>().Select(x => new { Name = x.ToString(), Id = x });
                cbo.Properties.TextField = "Name";
                cbo.Properties.ValueField = "Id";
                cbo.Properties.ValueType = typeof(CivilStatus);

            });
        });
        groupItem.Items.Add(m => m.Gender, item =>
        {
            item.NestedExtension().ComboBox(cbo =>
            {
                cbo.Properties.ValidationSettings.RequiredField.IsRequired = true;
                cbo.Properties.ValidationSettings.SetFocusOnError = true;
                cbo.Properties.ValidationSettings.Display = Display.Dynamic;
                cbo.Properties.DataSource = Enum.GetValues(typeof(Gender)).Cast<Gender>().Select(x => new { Name = x.ToString(), Id = x });
                cbo.Properties.ValueField = "id";
                cbo.Properties.TextField = "Name";
                cbo.Properties.ValueType = typeof(Gender);
            });
        });
        groupItem.Items.Add(m => m.BirthDate, item =>
        {
            item.NestedExtension().DateEdit(dt =>
            {
                dt.Properties.ValidationSettings.Display = Display.Dynamic;
                dt.Properties.ValidationSettings.RequiredField.IsRequired = true;

            });
        });
        groupItem.Items.Add(m => m.AddressLine1, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.AddressLine2, item =>
        {
        });

        groupItem.Items.Add(m => m.TownCity, item =>
        {
            item.NestedExtension().ComboBox(cbo =>
            {
                cbo.ShowModelErrors = true;
                cbo.Properties.DataSource = new UnitOfWork().TownCityRepo.Get();
                cbo.Properties.ValueField = "TownCityId";
                cbo.Properties.TextField = "name";
                cbo.Properties.ValidationSettings.RequiredField.IsRequired = true;
                cbo.Properties.ValueType = typeof(int);

                cbo.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.Cellular, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.Religion, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.Citizenship, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.Languages, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.Skills, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
            });
        });
        groupItem.Items.Add(m => m.Email, item =>
        {
            item.NestedExtension().TextBox(txt =>
            {
                txt.Name = "Email";
                txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
                txt.Properties.ValidationSettings.SetFocusOnError = true;
                txt.Properties.ValidationSettings.Display = Display.Dynamic;
                txt.Properties.ClientSideEvents.KeyUp = "function(s,e){OnValueChanged(s,e);}";
            });
        });
    }).GetHtml();






}

<script>
    var Email = "";
    function PrepareValidationScripts() {
        var form = $('#form-profile');
        if (form.executed)
            return;

        form.removeData("validator");
        $.validator.unobtrusive.parse('#form-profile');
        form.executed = true;
    }


    function InitializeValidationRulesForForm() {
        var form = $('#form-profile');
        if (form.attr("executed"))
            return;
        form.removeData("validator");
        $.validator.unobtrusive.parse('#form-profile');
        form.executed = true;
    }
    function IsValidForm() {
        InitializeValidationRulesForForm();
        var validator = $.data($('#form-profile')[0], 'validator');
        return validator.form();
    }
    function ResendEmail() {



    }

    function OnValueChanged(s, e) {
        Email = '@Model.Email';
       @{
           if(Model.Email!=null )
           {
               ViewContext.Writer.Write("CheckEmailChange(s,e);");
           }
        }

    }
    function CheckEmailChange(s,e) {
        isChanged = true;
        if (s.GetValue() != Email) {
            btnResendEmail.SetEnabled(false);
        }
        else {
            btnResendEmail.SetEnabled(true);
        }
    }
    function SendEmailVerification(s, e) {
        $.ajax({
            url: '@Url.Action("ResendEmailVerification","member")',
            beforeSend: function (s, e) {
                LoadingSubmit.Show();
            },

        }).done(function () {
            LoadingSubmit.Hide();
            });
    }
</script>