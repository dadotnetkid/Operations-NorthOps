
@{
    bool? isExamPassed = ViewBag.isExamPassed;
    bool? isTraining = ViewBag.isTraining;
    var grid = Html.DevExpress().GridView(settings =>
    {
        if (isExamPassed == null)
        {
            settings.Name = "JobApplicationGrid";
        }
        else if (isExamPassed == true && isTraining == true)
        {
            settings.Name = "JobApplicationGridTraining";
        }
        else
        {
            settings.Name = "JobApplicationGridShortlist";
        }
        settings.CallbackRouteValues = new
        {
            Controller = "Recruit",
            Action = "JobApplicationGridPartial",
            isExamPassed = ViewBag.isExamPassed,
            newId = ViewBag.newId
        };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Recruit", Action = "JobApplicationGridPartialAddNew",
            isExamPassed = ViewBag.isExamPassed,
            newId = ViewBag.newId
        };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Recruit", Action = "JobApplicationGridPartialUpdate",
            isExamPassed = ViewBag.isExamPassed,
            newId = ViewBag.newId
        };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Recruit", Action = "JobApplicationGridPartialDelete",
            isExamPassed = ViewBag.isExamPassed,
            newId = ViewBag.newId
        };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);


        settings.CommandColumn.ShowClearFilterButton = true;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = false;
        settings.CommandColumn.ShowEditButton = true;

        settings.KeyFieldName = "JobApplicationId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 300;

        //settings.Columns.Add("JobApplicationId");

        settings.Columns.Add(col =>
        {
            col.FieldName = "Users.CreatedDate";
            col.ColumnType = DevExpress.Web.Mvc.MVCxGridViewColumnType.DateEdit; col.PropertiesEdit.DisplayFormatString = "MM/dd/yyyy";
        });
        settings.Columns.Add("Users.Email");
        settings.Columns.Add("Users.FullName");


        settings.Columns.Add(column =>
        {
            column.FieldName = "Users.EmailConfirmed";
            column.Caption = "Resume";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.SetDataItemTemplateContent(c =>
            {


                //ch.Name = "cb_" + c.KeyValue.ToString();
                //chk.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "Resume"));
                //chk.ClientEnabled = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "IsRequiredRelationship")) != true;
                //chk.ClientEnabled = false;"IsExamReady"
                Html.DevExpress().CheckBox(ch =>
                {
                    ch.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "Users.EmailConfirmed"));
                    ch.Name = "cb_" + c.KeyValue.ToString();
                    ch.ReadOnly = true;
                }).Bind(DataBinder.Eval(c.DataItem, "Users.EmailConfirmed")).Render();
            });

        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "IsExamReady";
            col.Caption = "Is Exam Ready";
            col.ColumnType = MVCxGridViewColumnType.CheckBox;
            col.SetDataItemTemplateContent(c =>
            {
                Html.DevExpress().CheckBox(ch =>
                {
                    ch.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "IsExamReady"));
                    ch.Name = "cbIsExamReady_" + c.KeyValue.ToString();
                    ch.ReadOnly = true;
                }).Bind(DataBinder.Eval(c.DataItem, "IsExamReady")).Render();

            });

        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "ApplicantExamScore";
            col.Caption = "Score";
            col.PropertiesEdit.DisplayFormatString = "D2";
            col.SortOrder = DevExpress.Data.ColumnSortOrder.Descending;
            col.Settings.AutoFilterCondition = AutoFilterCondition.Less;

            col.SetDataItemTemplateContent(colSettings =>
            {
                var score = Convert.ToDecimal(DataBinder.Eval(colSettings.DataItem, "ApplicantExamScore") ?? 0);
                Html.DevExpress().Label(lbl =>
                {
                    lbl.ControlStyle.CssClass = score < 75 && score != 0 ? "lbl-failed" : score >= 75 ? "lbl-passed" : "";

                    lbl.Text = $"{DataBinder.Eval(colSettings.DataItem, "ApplicantExamScore"):0.0}";

                }).GetHtml();

            });



        });
        if (isExamPassed == null)
        {
            settings.Columns.Add(column =>
            {
                column.FieldName = "MBTIResult";
                column.Caption = "MBTI";
            });
            settings.Columns.Add("Listening");
            settings.Columns.Add("Typing");
            settings.Columns.Add("Grammar");
        }


        /*     settings.Columns.Add(column =>
          {
              column.FieldName = "PhoneInterview";
              column.Caption = "Phone Interview";
              column.ColumnType = MVCxGridViewColumnType.CheckBox;
              column.SetDataItemTemplateContent(c =>
              {

                  Html.DevExpress().CheckBox(chk =>
                  {
                      chk.Name = "cbRi_" + c.KeyValue.ToString();
                      chk.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "PhoneInterview"));
                      chk.ClientEnabled = false; chk.Properties.AllowGrayed = true;
                  }).Bind(DataBinder.Eval(c.DataItem, "PhoneInterview")).Render();
              });
          });


        settings.Columns.Add(column =>
          {
              column.FieldName = "PersonalInterview";
              column.Caption = "Personal Interview";
              column.ColumnType = MVCxGridViewColumnType.CheckBox;
              column.SetDataItemTemplateContent(c =>
              {
                  Html.DevExpress().CheckBox(chk =>
                  {
                      chk.Name = "cbPi_" + c.KeyValue.ToString();
                      //chk.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "PersonalInterview"));
                      chk.ClientEnabled = false; chk.Properties.AllowGrayed = true;
                  }).Bind(DataBinder.Eval(c.DataItem, "PersonalInterview")).Render();

              });
          });
          settings.Columns.Add(column =>
          {
              column.FieldName = "Training";
              column.Caption = "Training";
              column.ColumnType = MVCxGridViewColumnType.CheckBox;
              column.SetDataItemTemplateContent(c =>
              {
                  Html.DevExpress().CheckBox(chk =>
                  {
                      chk.Name = "cbT_" + c.KeyValue.ToString();
                      //chk.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "Training"));
                      chk.ClientEnabled = false; chk.Properties.AllowGrayed = true;
                  }).Bind(DataBinder.Eval(c.DataItem, "Training")).Render();
              });
          });
          settings.Columns.Add(column =>
          {
              column.FieldName = "OnBoarding";
              column.Caption = "OnBoarding";
              column.ColumnType = MVCxGridViewColumnType.CheckBox;
              column.SetDataItemTemplateContent(c =>
              {
                  Html.DevExpress().CheckBox(chk =>
                  {
                      chk.Name = "cbOb_" + c.KeyValue.ToString();
                      //chk.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "OnBoarding"));
                      chk.ClientEnabled = false; chk.Properties.AllowGrayed = true;
                  }).Bind(DataBinder.Eval(c.DataItem, "OnBoarding")).Render();
              });
          });
          settings.Columns.Add(column =>
          {
              column.FieldName = "Contract";
              column.Caption = "Contract";
              column.SetDataItemTemplateContent(c =>
              {
                  Html.DevExpress().CheckBox(chk =>
                  {
                      chk.Name = "cbC_" + c.KeyValue.ToString();
                      //chk.Checked = Convert.ToBoolean(DataBinder.Eval(c.DataItem, "Contract"));
                      chk.ClientEnabled = false; chk.Properties.AllowGrayed = true;
                  }).Bind(DataBinder.Eval(c.DataItem, "Contract")).Render();
              });
          });*/
        //settings.Columns.Add("PhoneInterview");
        //settings.Columns.Add("PersonalInterview");
        //settings.Columns.Add("Training");
        //settings.Columns.Add("OnBoarding");
        //settings.Columns.Add("Contract");
        settings.Columns.Add("Users.Cellular");
        settings.Columns.Add("Users.Skills");
        //settings.Columns.Add("Users.ReApply");
        settings.SetEditFormTemplateContent(c =>
        {
            var item = ViewData["item"] != null ? ViewData["item"] : c.DataItem;


            Html.RenderAction("editapplicantPartial", new { Id = DataBinder.Eval(item, "JobApplicationId"), isExamPassed = isExamPassed, isTraining = isTraining });

            Html.DevExpress().HyperLink(lnk =>
            {
                lnk.Name = "lnkVisitDashboard";
                lnk.Properties.Text = "View Dashboard";
                lnk.NavigateUrl = Url.Action("index", "applicant", new { userid = DataBinder.Eval(item, "UserId") });
                lnk.Style.Add(HtmlTextWriterStyle.MarginLeft, "10px");
            }).GetHtml();
        });
    });


    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()