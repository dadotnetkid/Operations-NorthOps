@model Users

@{



    if (Model.Id == User.Identity.GetUserId())
    {
        Html.DevExpress().Button(m =>
        {
            m.Text = "Update";
            m.ClientSideEvents.Click = "function(s,e){Update()}";
            m.Name = "btnSubmit";
            m.UseSubmitBehavior = true;
        }).GetHtml();
    }
    <div class="row margin-top-5">
        <div class="col-lg-6">
            <label>Email</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.Email, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                    txt.Properties.NullText = "Email";
                }).GetHtml();
            }
        </div>
        <div class="col-lg-6">
            <label>Username</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.UserName, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                    txt.Properties.NullText = "UserName";
                }).GetHtml();
            }
        </div>
    </div>

    <div class="row margin-top-5">
        <div class="col-lg-6">
            <label>Password(Leave if you dont want to change)</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.Password, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                    txt.Properties.NullText = "Password";
                }).GetHtml();
            }
        </div>
        <div class="col-lg-6">
            <label>First Name</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.FirstName, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                    txt.Properties.NullText = "First Name";
                }).GetHtml();
            }
        </div>

    </div>
    <div class="row margin-top-5">
        <div class="col-lg-6">
            <label>Middle Name</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.MiddleName, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                    txt.Properties.NullText = "Middle Name";
                }).GetHtml();
            }
        </div>
        <div class="col-lg-6">
            <label>Last Name</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.LastName, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                    txt.Properties.NullText = "Last Name";
                }).GetHtml();
            }
        </div>

    </div>
    <div class="row margin-top-5">
        <div class="col-lg-6">
            <label>Middle Name</label>
            @{
                Html.DevExpress().ComboBoxFor(m => m.CivilStatus, cbo =>
                {
                    cbo.Width = Unit.Percentage(100);
                    cbo.Properties.NullText = "Civil Status";
                    cbo.Properties.ValueField = "Id";
                    cbo.Properties.TextField = "Name";
                }).BindList(Enum.GetValues(typeof(CivilStatus)).Cast<CivilStatus>().Select(x => new { Id = x, Name = x.ToString() })).GetHtml();
            }
        </div>
        <div class="col-lg-6">
            <label>Gender</label>
            @{
                Html.DevExpress().ComboBoxFor(m => m.Gender, cbo =>
                {
                    cbo.Width = Unit.Percentage(100);
                    cbo.Properties.NullText = "Gender";
                    cbo.Properties.ValueField = "Id";
                    cbo.Properties.TextField = "Name";
                }).BindList(Enum.GetValues(typeof(Gender)).Cast<Gender>().Select(x => new { Id = x, Name = x.ToString() })).GetHtml();
            }
        </div>

    </div>
    <div class="row margin-top-5">
        <div class="col-lg-6">
            <label>BirthDate</label>
            @{
                Html.DevExpress().DateEditFor(m => m.BirthDate, dt =>
                {
                    dt.Width = Unit.Percentage(100);
                }).GetHtml();
            }
        </div>
        <div class="col-lg-6">
            <label>Address Line 1</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.AddressLine1, txt =>
                {
                    txt.Width = Unit.Percentage(100);

                }).GetHtml();
            }
        </div>

    </div>
    <div class="row margin-top-5">
        <div class="col-lg-6">
            <label>Address Line 2</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.AddressLine2, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                }).GetHtml();
            }
        </div>
        <div class="col-lg-6">
            <label>Town City</label>
            @{
                Html.DevExpress().ComboBoxFor(m => m.TownCity, cbo =>
                {
                    cbo.Width = Unit.Percentage(100);

                }).BindList(new UnitOfWork().TownCityRepo.Get()).GetHtml();
            }
        </div>

    </div>
    <div class="row margin-top-5">
        <div class="col-lg-6">
            <label>Address Line 2</label>
            @{
                Html.DevExpress().TextBoxFor(m => m.AddressLine2, txt =>
                {
                    txt.Width = Unit.Percentage(100);
                }).GetHtml();
            }
        </div>
        <div class="col-lg-6">
            <label>Town City</label>
            @{
                Html.DevExpress().ComboBoxFor(m => m.TownCity, cbo =>
                {
                    cbo.Width = Unit.Percentage(100);

                }).BindList(new UnitOfWork().TownCityRepo.Get()).GetHtml();
            }
        </div>

    </div>
    //Html.DevExpress().FormLayout(settings =>
    //{
    //    settings.Name = "UserFormLayout";
    //    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    //    settings.Enabled = Model.Id == User.Identity.GetUserId() ? true : false;
    //    var groupItem = settings.Items.AddGroupItem(groupSettings =>
    //    {
    //        groupSettings.Caption = "User Information";
    //        groupSettings.ShowCaption = DefaultBoolean.True;
    //        groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;
    //    });

    //    groupItem.SettingsItems.ShowCaption = DefaultBoolean.True;
    //    groupItem.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Left;
    //    settings.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
    //    settings.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;
    //    groupItem.SettingsItemHelpTexts.Position = HelpTextPosition.Auto;
    //    groupItem.ColCount = 2;

    //    groupItem.Items.Add(m => m.FirstName, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.LastName, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;

    //        });
    //    });
    //    groupItem.Items.Add(m => m.MiddleName, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.CivilStatus, item =>
    //    {
    //        item.NestedExtension().ComboBox(cbo =>
    //        {
    //            cbo.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            cbo.Properties.ValidationSettings.SetFocusOnError = true;
    //            cbo.Properties.ValidationSettings.Display = Display.Dynamic;
    //            cbo.Properties.DataSource = Enum.GetValues(typeof(CivilStatus)).Cast<CivilStatus>().Select(x => new { Name = x.ToString(), Id = x });
    //            cbo.Properties.TextField = "Name";
    //            cbo.Properties.ValueField = "Id";
    //            cbo.Properties.ValueType = typeof(CivilStatus);

    //        });
    //    });
    //    groupItem.Items.Add(m => m.Gender, item =>
    //    {
    //        item.NestedExtension().ComboBox(cbo =>
    //        {
    //            cbo.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            cbo.Properties.ValidationSettings.SetFocusOnError = true;
    //            cbo.Properties.ValidationSettings.Display = Display.Dynamic;
    //            cbo.Properties.DataSource = Enum.GetValues(typeof(Gender)).Cast<Gender>().Select(x => new { Name = x.ToString(), Id = x });
    //            cbo.Properties.ValueField = "id";
    //            cbo.Properties.TextField = "Name";
    //            cbo.Properties.ValueType = typeof(Gender);
    //        });
    //    });
    //    groupItem.Items.Add(m => m.BirthDate, item =>
    //    {
    //        item.NestedExtension().DateEdit(dt =>
    //        {
    //            dt.Properties.ValidationSettings.Display = Display.Dynamic;
    //            dt.Properties.ValidationSettings.RequiredField.IsRequired = true;

    //        });
    //    });
    //    groupItem.Items.Add(m => m.AddressLine2, item =>
    //    {
    //    });
    //    groupItem.Items.Add(m => m.AddressLine1, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.TownCity, item =>
    //    {
    //        item.NestedExtension().ComboBox(cbo =>
    //        {
    //            cbo.ShowModelErrors = true;
    //            cbo.Properties.DataSource = new UnitOfWork().TownCityRepo.Get();
    //            cbo.Properties.ValueField = "TownCityId";
    //            cbo.Properties.TextField = "name";
    //            cbo.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            cbo.Properties.ValueType = typeof(int);

    //            cbo.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.Cellular, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.Religion, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.Citizenship, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.Languages, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //    groupItem.Items.Add(m => m.Skills, item =>
    //    {
    //        item.NestedExtension().TextBox(txt =>
    //        {
    //            txt.Properties.ValidationSettings.RequiredField.IsRequired = true;
    //            txt.Properties.ValidationSettings.SetFocusOnError = true;
    //            txt.Properties.ValidationSettings.Display = Display.Dynamic;
    //        });
    //    });
    //}).GetHtml();






}

<script>

    function PrepareValidationScripts() {
        var form = $('#form-profile');
        if (form.executed)
            return;

        form.removeData("validator");
        $.validator.unobtrusive.parse('#form-profile');
        form.executed = true;
    }


    function InitializeValidationRulesForForm() {
        var form = $('#form-profile');
        if (form.attr("executed"))
            return;
        form.removeData("validator");
        $.validator.unobtrusive.parse('#form-profile');
        form.executed = true;
    }
    function IsValidForm() {
        InitializeValidationRulesForForm();
        var validator = $.data($('#form-profile')[0], 'validator');
        return validator.form();
    }
    function Update() {
        //$.validator.unobtrusive.parse('#form-profile');

        /// var form = $('#form-profile');
        // if (form.valid()) {
        //$('#form-profile').trigger('submit')


    }
</script>